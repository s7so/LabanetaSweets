# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- In React Native Expo projects, use '/(tabs)/' prefix for tab navigation routes to ensure proper routing
- When hiding tab bar items in React Native, both tabBarStyle: { display: 'none' } and tabBarButton: () => null are needed

# Scratchpad

## Current Task: Create Refer a Friend Screen

Task Description: Create a screen that allows users to share their referral code with friends, which shows:
- Header with back button and title
- Referral code display
- Share options
- Referral benefits explanation

Progress:
[ ] Create refer-a-friend screen layout
[ ] Add header with back button
[ ] Create referral code section
  [ ] Display code
  [ ] Copy button
[ ] Add share options
[ ] Add referral benefits section

Design Details:
- Header:
  - Back button (<)
  - "Refer a friend" title
  - Clean, minimal design
- Referral Code Section:
  - Large display of code
  - Copy button
  - Share button
- Benefits Section:
  - Icon
  - Description of benefits
- Colors:
  - Primary: #88D2D9 (Light blue)
  - Background: White
  - Text: Dark for titles, Grey for descriptions

Implementation Plan:
1. Create new screen at app/refer-a-friend.tsx
2. Implement header with navigation
3. Create referral code display component
4. Add share functionality
5. Add benefits section

## Current Task: Create Home Screen

Task Description: Create a home screen that matches the provided design image, which shows:
- Header with logo and location
- Search bar
- Categories carousel with icons
- "End of year Discount" banner
- "Best Selling" section with product cards
- "Offers" section with product cards
- "New Arrival" banner
- Bottom tab navigation

Progress:
[X] Previous verification screen implementation completed
[X] Create new home screen layout
[X] Add header with logo and location
[X] Implement search bar
[X] Create categories carousel
  [X] Category icons
  [X] Labels below icons
[X] Add promotional banner
[X] Create product card component
[X] Implement "Best Selling" section
[X] Implement "Offers" section
[X] Add "New Arrival" banner
[X] Set up bottom tab navigation

Recent Updates:
- Added SafeAreaView for proper content display
- Adjusted logo size and positioning
- Modified location button alignment
- Reduced spacing between logo and location
- Removed unnecessary padding and margins

Current Focus:
- Fine-tuning the UI layout and spacing
- Ensuring proper alignment of all elements
- Optimizing the visual appearance

Next Steps:
- Test the layout on different screen sizes
- Implement actual data fetching from API
- Add loading states for dynamic content
- Implement category filtering functionality
- Add proper error handling

Design Details:
- Header:
  - Logo image from @logo.png
  - Location selector with UAE flag
  - Search bar with grey background
- Categories:
  - Horizontal scrollable list
  - Icons: Cheesecake, Rice Milk, Fresh Juice, etc.
- Product Cards:
  - Product image
  - Name and description
  - Price in AED
  - Add to cart button
- Colors:
  - Primary: #88D2D9 (Light blue)
  - Background: White
  - Text: Dark for titles, Grey for descriptions
- Bottom Navigation:
  - Home, Cart, Orders, Account tabs
  - Icons with labels

Implementation Notes:
- Screen located at app/(tabs)/home.tsx
- Using horizontal ScrollView for categories
- Product cards implemented as reusable components
- Bottom navigation configured in (tabs)/_layout.tsx
- SafeAreaView added for proper content display
- Logo size and spacing adjusted for better visual appeal